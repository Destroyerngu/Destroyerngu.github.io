<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java泛型与Kotlin高阶语法糖</title>
    <link href="/2022/06/02/Java%E6%B3%9B%E5%9E%8B%E4%B8%8EKotlin%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <url>/2022/06/02/Java%E6%B3%9B%E5%9E%8B%E4%B8%8EKotlin%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Java泛型与Kotlin高阶函数语法糖"><a href="#Java泛型与Kotlin高阶函数语法糖" class="headerlink" title="Java泛型与Kotlin高阶函数语法糖"></a><em>Java</em>泛型与<em>Kotlin</em>高阶函数语法糖</h1><ul><li><h3 id="java泛型"><a href="#java泛型" class="headerlink" title="java泛型"></a><em>java</em>泛型</h3><ol><li><p>什么是泛型？ 泛指<strong>一切类型</strong></p><p> 常使用 <em>T</em> <em>R</em> <em>V</em> <em>K</em> <em>I</em> <em>O</em> 表示</p></li><li><p>协变与形变</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Object&gt; a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;String&gt; b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        a = b; <span class="hljs-comment">// 报错,为什么,a 需要 List&lt;Objects&gt;类型，而b 为List&lt;String&gt;类型</span><br>        *****************<br>        <span class="hljs-comment">// 此时需要使用协变</span><br>        父类接收子类 协变 ? <span class="hljs-keyword">extends</span><br>        <span class="hljs-title class_">List</span>&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(); <span class="hljs-comment">// ? 为占位符，表示一个继承于Object的子类</span><br>        List&lt;String&gt; d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        c = d;<span class="hljs-comment">// 正确!!!</span><br>        *****************<br>        List&lt;Object&gt; e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;String&gt; f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        f = e;<span class="hljs-comment">// 报错，f需要List&lt;Object&gt;类型，而e为List&lt;String&gt;类型，类型不匹配</span><br>        *****************<br>        <span class="hljs-comment">// 此时需要使用形变</span><br>        子类接收父类 形变 ? <span class="hljs-built_in">super</span><br>        List&lt;Object&gt; g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;? <span class="hljs-built_in">super</span> String&gt; h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        h = g;<span class="hljs-comment">// 正确！</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><em>java</em>泛型类的使用</p><p> 注意：泛型类中的方法只是使用了泛型类类型作为参数的函数，不是泛型函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 泛型类</span><br><span class="hljs-comment">// T type</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bag</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T value;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(T value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> T getValue &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value;<br>    &#125;<br>    <span class="hljs-comment">// main</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 前面&lt;&gt; 和 后面&lt;&gt; 必须指定一处类型</span><br>        Bag&lt;String&gt; schoolBag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bag</span>&lt;&gt;();<br>        schoolBag.setValue(<span class="hljs-string">&quot;语文书&quot;</span>);<br>        System.out.println(schoolBag.getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="kotlin泛型类的使用"><a href="#kotlin泛型类的使用" class="headerlink" title="kotlin泛型类的使用"></a><em>kotlin</em>泛型类的使用</h3><ol><li><p><em>kotlin</em>泛型类的使用</p><p> <em>kotlin</em>: <em>out</em> 这个类型只能作为返回值 输出 生产</p><p> <em>kotln</em>: <em>in</em>只能作为参数 接受 消费</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bag</span>&lt;<span class="hljs-type">in I,out O</span>&gt;</span>(<span class="hljs-keyword">var</span> value: <span class="hljs-meta">@UnsafeVariance</span> I,<span class="hljs-keyword">var</span> result: <span class="hljs-meta">@UnsafeVariance</span> O) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setValue</span><span class="hljs-params">(v1: <span class="hljs-type">I</span>)</span></span> &#123;<br>        value = v1<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span>: O &#123;<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="Kotlin泛型函数的使用"><a href="#Kotlin泛型函数的使用" class="headerlink" title="Kotlin泛型函数的使用"></a><em>Kotlin</em>泛型函数的使用</h3><p>何为泛型函数？不确定参数或者返回值类型的函数就是泛型函数</p><ol><li><p>仅有一个泛型</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>: T &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">test2</span><span class="hljs-params">(v1: <span class="hljs-type">T</span>)</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>放回值和参数类型均需要自己指定</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T,R&gt;</span> <span class="hljs-title">test</span><span class="hljs-params">(v1: <span class="hljs-type">T</span>, v2: <span class="hljs-type">T</span>)</span></span>: R? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="Kotlin高阶函数分析"><a href="#Kotlin高阶函数分析" class="headerlink" title="Kotlin高阶函数分析"></a><em>Kotlin</em>高阶函数分析</h3><ol><li><p>何为<strong>高阶函数</strong>与为什么需要使用**<em>inline</em>**?</p><p> 高阶函数是将<strong>函数</strong>用作<strong>参数或返回值</strong>的函数，实际开发过程中<strong>一般所有</strong>高阶函数都必须使用**<em>inline</em><strong>修饰，使之成为</strong>内联函数<strong>。不使用<em>inline</em>修饰高阶函数时，使用此类<a href="https://www.kotlincn.net/docs/reference/lambdas.html">高阶函数</a>会带来一些运行时的效率损失，因为编译时，每一个函数都是一个</strong>对象<strong>，</strong>内存分配<strong>（对于函数对象和类）和</strong>虚拟调用<strong>会引入</strong>运行时间开销<strong>，</strong>降低效率<strong>。当<em>inline</em>修饰了高阶函数时，此时编译时程序只是做了一个</strong>展开&#x2F;替换*<em>（类似于 C 语言的宏定义），所以在许多情况下我们通过使用</em>inline*内联化 lambda 表达式来消除这类的开销。</p></li><li><p>**<em>lambda</em>**表达式分析</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">show1</span><span class="hljs-params">(lambda: (<span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span> &#123;<br>    <span class="hljs-comment">// lamba表达式为String类型的形参，没有返回值</span><br>    <span class="hljs-comment">// lambda 表达式里面是 it</span><br>    lambda(<span class="hljs-keyword">this</span>)<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">show2</span><span class="hljs-params">(lambda: <span class="hljs-type">String</span>.() -&gt; <span class="hljs-type">Unit</span> )</span></span> &#123;<br>    <span class="hljs-comment">// lambda 表达式里面是 this</span><br>    <span class="hljs-keyword">this</span>.lambda()<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-string">&quot;jack&quot;</span>.show1&#123;<br>        println(<span class="hljs-string">&quot;hello <span class="hljs-variable">$it</span>&quot;</span>)<br>    &#125;<br>    <span class="hljs-string">&quot;Merry&quot;</span>.show2&#123;<br>        println(<span class="hljs-string">&quot;hello <span class="hljs-variable">$this</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><em>lambda</em>与泛型的综合运用</p><ul><li>给任意一个类型添加一个扩展函数，lambda 中使用 it 访问这个对象</li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> T.<span class="hljs-title">show1</span><span class="hljs-params">(lambda: (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span> &#123;<br>    lambda(<span class="hljs-keyword">this</span>) <span class="hljs-comment">// 在这个函数中this指代的是调用这个扩展函数类型为T的对象,并把它作为参数传递给lambda，</span><br>    <span class="hljs-comment">//在lambda中使用it访问这个对象</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>给任意一个类型添加一个扩展函数，lambda 中使用 this 访问这个对象</li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> T.<span class="hljs-title">show2</span><span class="hljs-params">(lambda: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">Unit</span>)</span></span> &#123;<br>    <span class="hljs-keyword">this</span>.lambda() <span class="hljs-comment">// this指代是调用这个扩展函数类型为T的对象，再将其作为调用lambda的对象</span><br>     <span class="hljs-comment">// 在lambda中使用this访问这个对象</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>给任意一个类型添加一个扩展函数,并将这个对象传递给 lambda 表达式,lambda 返回值的类型由 lambda 最后一行的结果决定</li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T,R&gt;</span> T.<span class="hljs-title">show3</span><span class="hljs-params">(lambda: (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">R</span>)</span></span> &#123;<br><span class="hljs-keyword">val</span> result = lambda(<span class="hljs-keyword">this</span>)<br>println(result!!::<span class="hljs-keyword">class</span>.java.name)<br><span class="hljs-comment">// 上行可以打印出lambda表达式最后一行结果的值</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>运行效果如下</li></ul></li></ul><p>​ <img src="C:\Users\绝心\AppData\Roaming\Typora\typora-user-images\image-20220529173006301.png" alt="image-20220529173006301"><img src="C:\Users\绝心\AppData\Roaming\Typora\typora-user-images\image-20220529173058283.png" alt="image-20220529173058283"></p><ul><li><h3 id="Kotlin语法糖分析"><a href="#Kotlin语法糖分析" class="headerlink" title="Kotlin语法糖分析"></a><em>Kotlin</em>语法糖分析</h3><ul><li><p><em>apply</em>分析</p><p><em>apply</em>作用：使用 apply 可以进行初始化操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> T.<span class="hljs-title">myApply</span><span class="hljs-params">(lambda: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">T</span>)</span></span>: T &#123;<br>    <span class="hljs-keyword">this</span>.lambda()<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>also 分析</p><p><em>also</em>作用：使用 also 可以完成同时性的操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> T.<span class="hljs-title">myAlso</span><span class="hljs-params">(lambda: (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">T</span>)</span></span>: T &#123;<br>    lambda(<span class="hljs-keyword">this</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>run 分析</p><p><em>run</em>作用：使用 run 可以执行一段代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R&gt;</span> <span class="hljs-title">myRun</span><span class="hljs-params">(lambda: () -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br><span class="hljs-keyword">return</span> lambda()<br>&#125;<br><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T,R&gt;</span> T.<span class="hljs-title">myRun</span><span class="hljs-params">(lambda: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.lambda()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>with 分析</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T,R&gt;</span> <span class="hljs-title">myWith</span><span class="hljs-params">(value: <span class="hljs-type">T</span>,lambda: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br>    <span class="hljs-keyword">return</span> value.lambda()<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>forEach 分析</p><p><em>forEach</em>作用：使用 forEach 可以遍历完成相关的操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> Iterable<span class="hljs-type">&lt;T&gt;</span>.<span class="hljs-title">myForEach</span><span class="hljs-params">(lambda: (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span>: <span class="hljs-built_in">Unit</span> &#123;<br><span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>) &#123;<br>lambda(item)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/01/hello-world/"/>
    <url>/2022/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
