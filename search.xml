<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java输入输出流</title>
      <link href="/2022/06/05/Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
      <url>/2022/06/05/Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java输入输出流"><a href="#Java输入输出流" class="headerlink" title="Java输入输出流"></a><em>Java</em>输入输出流</h1><hr> <h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>本文总结了上课<em>Java</em>老师的讲解，记录了一些经典的<em>java</em>用法</li><li>本文篇幅较长，没有耐心与兴趣的朋友勿入</li></ul><h3 id="I-x2F-O流的概念"><a href="#I-x2F-O流的概念" class="headerlink" title="I&#x2F;O流的概念"></a><em>I&#x2F;O</em>流的概念</h3><ul><li><h4 id="流（stream）"><a href="#流（stream）" class="headerlink" title="流（stream）"></a>流（<em>stream</em>）</h4></li></ul><p>  <em>Java</em>采用流的概念屏蔽了存储数据的起点和终点种类，文件、键盘、网络和其他设备都可以把它们抽象为流，通过流可以自由地控制文件、内存、<em>I&#x2F;O</em>设备等数据的流向</p><ul><li><h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><ul><li>根据<em>I&#x2F;O</em>流的流向可分为输入流（<em>inputstream</em>）和输出流（<em>outputsteam</em>）  </li><li>当程序<strong>读取</strong>数据时，开启了一个通向起点数据源的输入流，这个起点可以是文件、内存、网络连接。</li><li>当程序<strong>写入</strong>数据时，开启了一个通向目的地的输出流。</li></ul></li><li><h4 id="读写数据的方法基本遵循步骤"><a href="#读写数据的方法基本遵循步骤" class="headerlink" title="读写数据的方法基本遵循步骤"></a>读写数据的方法基本遵循步骤</h4><ol><li>打开一个流  （<em>I&#x2F;O</em>流一旦被创建后，就会<strong>自动打开</strong>）</li><li>读（写）信息  </li><li>关闭流</li></ol></li></ul><hr><h3 id="I-x2F-O流的种类"><a href="#I-x2F-O流的种类" class="headerlink" title="I&#x2F;O流的种类"></a><em>I&#x2F;O</em>流的种类</h3><ul><li><p>字节流（<em>byte oriented stream</em>）  </p><ul><li>字节流以8位的字节为基本处理单位 </li><li>字节流不能直接处理<em>Unicode</em>字符</li></ul></li><li><p>字符流（<em>byte oritented stream</em>)</p><ul><li>字符流以16位的字节为基本处理单位  </li><li>字符流处理的单元为16位的<em>Unicode</em>字符，由<em>Java</em>虚拟机将字节转化为16位的<em>Unicode</em>字符</li></ul></li></ul><hr>  <h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li>字节流</li></ul><ol><li>所有文件的存储都是字节（<em>byte</em>）的存储，因此字节流可用于<strong>任何类型</strong>的对象，如音频文件、图片、歌曲</li></ol><ul><li>字符流</li></ul><ol><li>处理多国语言，就得用字符流</li><li>字符流通常处理文本</li></ol><hr>  <h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><h3 id="一、文件File类"><a href="#一、文件File类" class="headerlink" title="一、文件File类"></a>一、文件File类</h3><ul><li><h4 id="文件类的方法"><a href="#文件类的方法" class="headerlink" title="文件类的方法"></a>文件类的方法</h4></li></ul><p>File 类是 java.io 包中唯一代表<strong>磁盘文件本身</strong>的对象，也就是说，如果希望在程序中操作文件和目录，则都可以通过 File 类来完成。</p><p>File 类定义了一些方法来操作文件，如新建、删除、重命名文件和目录等。File 类不能访问文件内容本身，如果需要访问文件内容本身，则需要使用输入&#x2F;输出流。</p><table><thead><tr><th><strong>方法名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>boolean canRead()</strong></td><td><strong>测试应用程序是否能从指定的文件中进行读取</strong></td></tr><tr><td><strong>boolean  canWrite()</strong></td><td><strong>测试应用程序是否能写当前文件</strong></td></tr><tr><td><strong>boolean delete()</strong></td><td><strong>删除当前对象指定的文件</strong></td></tr><tr><td><strong>boolean exists()</strong></td><td><strong>测试当前 File 是否存在</strong></td></tr><tr><td><strong>String  getAbsolutePath()</strong></td><td><strong>返回由该对象表示的文件的绝对路径名</strong></td></tr><tr><td><strong>String getName()</strong></td><td><strong>返回表示当前对象的文件名或路径名（如果是路径，则返回最后一级子路径名）</strong></td></tr><tr><td><strong>boolean</strong> <strong>createNewFile()</strong></td><td><strong>创建一个新的文件。</strong></td></tr><tr><td><strong>boolean  isAbsolute()</strong></td><td><strong>当前 File 对象表示的文件是否为一个绝对路径名。</strong></td></tr><tr><td><strong>boolean  isDirectory()</strong></td><td><strong>测试当前 File 对象表示的文件是否为一个路径</strong></td></tr><tr><td><strong>boolean isFile()</strong></td><td><strong>当前 File 对象表示的文件是否为一个“普通”文件</strong></td></tr><tr><td><strong>long  lastModified()</strong></td><td><strong>返回当前 File 对象表示的文件最后修改的时间</strong></td></tr><tr><td><strong>long length()</strong></td><td><strong>返回当前 File 对象表示的文件长度</strong></td></tr><tr><td><strong>String[] list()</strong></td><td><strong>返回当前 File 对象指定的路径文件列表</strong></td></tr><tr><td><strong>String[] list(FilenameFilter)</strong></td><td><strong>返回当前 File 对象指定的目录中满足指定过滤器的文件列表</strong></td></tr><tr><td><strong>boolean mkdir()</strong></td><td><strong>创建一个目录，它的路径名由当前 File 对象指定</strong></td></tr><tr><td><strong>boolean mkdirs()</strong></td><td><strong>创建一个目录，它的路径名由当前 File 对象指定</strong></td></tr><tr><td><strong>boolean  renameTo(File)</strong></td><td><strong>将当前 File 对象指定的文件更名为给定参数 File 指定的路径名</strong></td></tr></tbody></table><ul><li><h4 id="文件类举例"><a href="#文件类举例" class="headerlink" title="文件类举例"></a>文件类举例</h4></li></ul><p>（1）在磁盘上创建一个文件，先创建文件夹，再创建文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFileDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;d:&quot;</span>+File.separator+<span class="string">&quot;filetest&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filePath.exists()) &#123;</span><br><span class="line"></span><br><span class="line">      filePath.delete();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filePath.mkdir();</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path+File.separator+<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"></span><br><span class="line">      file.delete();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">      file.createNewFile();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;创建文件成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">      e.printStackTrace();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）遍历一个文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListAllFile</span> &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;e://360Downloads&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"></span><br><span class="line">    showAllFile(file);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showAllFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file.isDirectory()) &#123;<span class="comment">//如果是目录</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;文件夹:&quot;</span> + file.getName());</span><br><span class="line"></span><br><span class="line">      File[] listFiles = file.listFiles();<span class="comment">//获取当前路径下的所有文件和目录,返回File对象数组</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (File f : listFiles) &#123;<span class="comment">//将目录内的内容对象化并遍历</span></span><br><span class="line"></span><br><span class="line">       showAllFile(f);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(file.isFile()) &#123;<span class="comment">//如果是文件</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;文件:&quot;</span> + file.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、输入输出流"><a href="#二、输入输出流" class="headerlink" title="二、输入输出流"></a>二、输入输出流</h3><ul><li><h4 id="实例：用字节流把数据写入文件和读到内存中。"><a href="#实例：用字节流把数据写入文件和读到内存中。" class="headerlink" title="实例：用字节流把数据写入文件和读到内存中。"></a>实例：用字节流把数据写入文件和读到内存中。</h4></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InptutAndOutDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String data=<span class="string">&quot;jiava计算机&quot;</span>;</span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span>+File.separator+<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">writeDataToFile(file,data);</span><br><span class="line">readFromFile(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFromFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">InputStream inputStream=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flen</span> <span class="operator">=</span> (<span class="type">int</span>) file.length();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[flen];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             len = inputStream.read(b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e1)&#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">inputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(len);</span><br><span class="line">        System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeDataToFile</span><span class="params">(File file, String data)</span>  &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">OutputStream outputStream=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">outputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">outputStream.write(data.getBytes());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">outputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、字符输入输出流举例"><a href="#三、字符输入输出流举例" class="headerlink" title="三、字符输入输出流举例"></a>三、字符输入输出流举例</h3><p><strong>字符流只能操作文本文件，不能操作图片，视频等非文本文件（因为是二进制存储的，要用字节流）</strong></p><ul><li>字符输出流（Writer）</li></ul><p>public abstract class Writer是用于写出字符流的所有类的超类，是一个抽象类，它定义了字节输出流的基本共性能方法</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写入单个字符</td></tr><tr><td>void write(char[] cbuf)</td><td>写入字符数组</td></tr><tr><td>abstract void write(char[] cbuf, int off, int len)</td><td>写入字符数组的某一部分</td></tr><tr><td>void write(String str)</td><td>写入字符串</td></tr><tr><td>void write(String str, int off, int len)</td><td>写入字符串的某一部分</td></tr><tr><td>void flush()</td><td>刷新该流的缓冲</td></tr></tbody></table><ul><li>FileWriter类是写字符到文件的类，构造时使用系统默认的字符编码和默认字节缓冲区。</li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>FileWriter(File file)</td><td>根据给定的 File 对象构造一个 FileWriter 对象</td></tr><tr><td>FileWriter(File file, boolean append)</td><td>根据给定的 File 对象构造一个 FileWriter 对象。其中append参数代表是否追加</td></tr><tr><td>FileWriter(String fileName)</td><td>根据给定的文件名构造一个 FileWriter 对象</td></tr><tr><td>FileWriter(String fileName, boolean append)</td><td>根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象</td></tr></tbody></table><hr><ul><li>字符输入流</li></ul><p>Reader 类是所有字符流输入类的父类，该类定义了许多方法，这些方法对所有子类都是有效的。</p><table><thead><tr><th><strong>方法名及返回值类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>int read()</td><td>从输入流中读取一个字符，并把它转换为 0~65535 的整数。如果返回 -1， 则表示   已经到了输入流的末尾。为了提高 I&#x2F;O 操作的效率，建议尽量使用下面两种 read()   方法</td></tr><tr><td>int read(char[] cbuf)</td><td>从输入流中读取若干个字符，并把它们保存到参数 cbuf 指定的字符数组中。 该方   法返回读取的字符数，如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td>int read(char[] cbuf,int off,int len)</td><td>从输入流中读取若干个字符，并把它们保存到参数 cbuf 指定的字符数组中。其中，   off 指定在字符数组中开始保存数据的起始下标，len 指定读取的字符数。该方法返   回实际读取的字符数，如果返回 -1，则表示已经到了输入流的末尾</td></tr></tbody></table><p>Java 提供了用来读取字符文件的便捷类——FileReader。该类的构造方法有如下两种重载形式。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>FileReader(File file)</td><td>在给定要读取数据的文件的情况下创建一个新的 FileReader 对象。其中，file 表示要从中读取数据的文件</td></tr><tr><td>FileReader(String fileName)</td><td>在给定从中读取数据的文件名的情况下创建一个新 FileReader 对象。其中，fileName 表示要从中读取数据的文件的名称，表示的是一个文件的完整路径</td></tr></tbody></table><p> 举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderAndWriterDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String data=<span class="string">&quot;jiava计算机&quot;</span>;</span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span>+File.separator+<span class="string">&quot;test1.txt&quot;</span>);</span><br><span class="line">Writer writer=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(file,<span class="literal">true</span>);<span class="comment">//追加方式</span></span><br><span class="line">writer.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;你好！\r\n&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;我在学习！\r\n&quot;</span>);</span><br><span class="line">writer.flush();</span><br><span class="line">writer.close();</span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line">Reader reader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line"><span class="type">int</span> len=(<span class="type">int</span>)file.length();</span><br><span class="line"><span class="type">char</span> myChar[]=<span class="keyword">new</span> <span class="title class_">char</span>[len];</span><br><span class="line"><span class="type">int</span> <span class="variable">rlen</span> <span class="operator">=</span> reader.read(myChar);</span><br><span class="line">    System.out.println(rlen);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(myChar));</span><br><span class="line">    reader.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、Java缓冲输入输出流"><a href="#四、Java缓冲输入输出流" class="headerlink" title="四、Java缓冲输入输出流"></a>四、Java缓冲输入输出流</h3><p>为什么要缓冲输入输出流？由于I&#x2F;O的速度和CPU的速度不匹配，导致文件的读取较慢。所以通过缓存，一次性将大量的数据刷入内存或者保存在本地上。提高文件的访问效率。</p><p>字节缓冲流： BufferedInputStream ， BufferedOutputStream</p><p>字符缓冲流： BufferedReader ， BufferedWriter</p><ul><li>字节缓冲流的使用（复制文件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyFileByBuffer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">File sourceFile=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:&quot;</span>+File.separator+<span class="string">&quot;filetest&quot;</span>+File.separator+<span class="string">&quot;xx.zip&quot;</span>);</span><br><span class="line">File targetFile=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:&quot;</span>+File.separator+<span class="string">&quot;movie&quot;</span>+File.separator+<span class="string">&quot;xx.zip&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">copyFileByBuffered(sourceFile,targetFile);</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;缓冲流（默认缓冲区）复制时间:&quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFileByBuffered</span><span class="params">(File sourceFile, File targetFile)</span> &#123;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourceFile),<span class="number">2048</span>);</span><br><span class="line">   BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(targetFile),<span class="number">2048</span>);</span><br><span class="line">   <span class="keyword">while</span>((b=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">   bos.write(b);</span><br><span class="line">   &#125;</span><br><span class="line">   bis.close();</span><br><span class="line">   bos.flush();</span><br><span class="line">   bos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字节缓冲流的使用（高效复制文件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyFileByBufferMore</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">File sourceFile=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:&quot;</span>+File.separator+<span class="string">&quot;filetest&quot;</span>+File.separator+<span class="string">&quot;xx.zip&quot;</span>);</span><br><span class="line">File targetFile=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:&quot;</span>+File.separator+<span class="string">&quot;movie&quot;</span>+File.separator+<span class="string">&quot;xx.zip&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">copyFileByBuffered(sourceFile,targetFile);</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;缓冲流（默认缓冲区）复制时间:&quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFileByBuffered</span><span class="params">(File sourceFile, File targetFile)</span> &#123;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">byte</span>[] bytes=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourceFile),<span class="number">2048</span>);</span><br><span class="line">   BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(targetFile),<span class="number">2048</span>);</span><br><span class="line">   <span class="keyword">while</span>((b=bis.read(bytes))!=-<span class="number">1</span>) &#123;</span><br><span class="line">   bos.write(bytes,<span class="number">0</span>,b);</span><br><span class="line">   &#125;</span><br><span class="line">   bis.close();</span><br><span class="line">   bos.flush();</span><br><span class="line">   bos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用字符缓冲流逐行读取文件。创建Student类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadFileByBuffered</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">   List&lt;Student&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">       File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:&quot;</span>+File.separator+<span class="string">&quot;filetest&quot;</span>+File.separator+<span class="string">&quot;score.txt&quot;</span>);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">br.readLine();</span><br><span class="line">String score[]=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">while</span>((line=br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">score=line.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">Student st=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;score.length;i++) &#123;</span><br><span class="line">st.setId(score[<span class="number">0</span>]);</span><br><span class="line">st.setName(score[<span class="number">1</span>]);</span><br><span class="line">st.setMath(Integer.parseInt(score[<span class="number">2</span>]));</span><br><span class="line">st.setChinese(Integer.parseInt(score[<span class="number">3</span>]));</span><br><span class="line">st.setEnglish(Integer.parseInt(score[<span class="number">4</span>]));</span><br><span class="line">st.setTotal(st.getMath()+st.getChinese()+st.getEnglish());</span><br><span class="line">st.setAverage(st.getTotal()/<span class="number">3.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line">list.add(st);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">       <span class="keyword">for</span>(Student st:list) &#123;</span><br><span class="line">       System.out.println(st.getId()+<span class="string">&quot; &quot;</span>+<span class="string">&quot;\t&quot;</span>+st.getName());</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、对象序列化与对象输入输出流"><a href="#五、对象序列化与对象输入输出流" class="headerlink" title="五、对象序列化与对象输入输出流"></a>五、对象序列化与对象输入输出流</h3><p>Java中要实现将对象保存起来持久化，需要让对象实现<strong>Serializable接口</strong>，这样就能将java对象用二进制流保存并恢复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaveObject</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">File fileName=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\filetest\\obj.txt&quot;</span>) ;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName));</span><br><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">oos.writeObject(user);</span><br><span class="line"> oos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//读取对象流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">User user1=(User)ois.readObject();</span><br><span class="line">System.out.println(user1.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、RandomAccessFile-类"><a href="#六、RandomAccessFile-类" class="headerlink" title="六、RandomAccessFile 类"></a>六、RandomAccessFile 类</h2><p>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来<strong>读、写文件。支持文件追加。</strong>RandomAccessFile 类支持字节和字符流。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>long length()</td><td>返回文件长度</td></tr><tr><td>void seek(long  pos)</td><td>移动文件位置指示器，pos 指定从文件开头的偏离字节数</td></tr><tr><td>int skipBytes(int  n)</td><td>跳过 n 个字节，返回数为实际跳过的字节数</td></tr><tr><td>int read()</td><td>从文件中读取一个字节，字节的高 24 位为 0，若遇到文件结尾，返回-1</td></tr><tr><td>final byte readByte()</td><td>从文件中读取带符号的字节值</td></tr><tr><td>final char readChar()</td><td>从文件中读取一个 Unicode 字符</td></tr><tr><td>final void writeChar(inte c)</td><td>写入一个字符，两个字节</td></tr><tr><td>final void writeBytes（String s）</td><td>写入个字符串</td></tr></tbody></table><p>实例<em>RandomAccessFile</em>读写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RandomAccessFile raf=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">String line=<span class="literal">null</span>;</span><br><span class="line">raf.seek(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>((line=raf.readLine())!= <span class="literal">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(line.getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>),<span class="string">&quot;gb2312&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">raf.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RandomAccessFile raf=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">long</span> len=raf.length();</span><br><span class="line">raf.seek(len);<span class="comment">//在文件尾部写行</span></span><br><span class="line">raf.write((<span class="string">&quot;中午&quot;</span>+<span class="string">&quot;\r\n&quot;</span>).getBytes());;</span><br><span class="line">raf.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">RandomAccessFile so=<span class="literal">null</span>;</span><br><span class="line">RandomAccessFile ta=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">so=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;src\\myfile\\360qudong.exe&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">ta=<span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;src\\myfile\\360qudong1.exe&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">byte</span> b[]=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len=so.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">ta.write(b,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;0k&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ta!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ta.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(so!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">so.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="七、URL对象与输入输出流"><a href="#七、URL对象与输入输出流" class="headerlink" title="七、URL对象与输入输出流"></a>七、URL对象与输入输出流</h3><p>URL全称是“统一资源定位”，表示的是网络上的某个文件。Java中URL类是用来操作网络中的资源文件。</p><ul><li>URL类的构造方法：</li></ul><table><thead><tr><th>序号</th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public URL(String protocol, String host, int port,  String file) throws MalformedURLException.</strong>   通过给定的参数(协议、主机名、端口号、文件名)创建URL。</td></tr><tr><td>2</td><td><strong>public URL(String protocol, String host, String file)  throws MalformedURLException</strong>   使用指定的协议、主机名、文件名创建URL，端口使用协议的默认端口。</td></tr><tr><td>3</td><td><strong>public URL(String url) throws MalformedURLException</strong>   通过给定的URL字符串创建URL</td></tr><tr><td>4</td><td><strong>public URL(URL context, String url) throws  MalformedURLException</strong>   使用基地址和相对URL创建</td></tr></tbody></table><ul><li>URL类的方法</li></ul><p>​URL类的方法很多，这里介绍<strong>openConnection()方法：</strong></p><p>​public URLConnection openConnection() throws IOException:    打开一个URL连接，并返回一个HttpURLConnection对象。</p><ul><li>HttpURLConnection对象的方法</li></ul><p>​public InputStream getInputStream() throws IOException：返回URL的输入流，用于读取资源。</p><p>实例：程序下载网页中的图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">saveImage(<span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveImage</span><span class="params">(String str)</span> &#123;</span><br><span class="line">URL url=<span class="literal">null</span>;</span><br><span class="line">HttpURLConnection conn=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">url=<span class="keyword">new</span> <span class="title class_">URL</span>(str);</span><br><span class="line">conn=(HttpURLConnection)url.openConnection();</span><br><span class="line">conn.connect();</span><br><span class="line">BufferedInputStream bis=<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(conn.getInputStream());</span><br><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:\\ddd.png&quot;</span>));</span><br><span class="line"><span class="type">byte</span> bt[]=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="keyword">while</span>((size=bis.read(bt))!=-<span class="number">1</span>) &#123;</span><br><span class="line">bos.write(bt,<span class="number">0</span>,size);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;finsh&quot;</span>);</span><br><span class="line">bos.flush();</span><br><span class="line">bos.close();</span><br><span class="line">bis.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法的运用</title>
      <link href="/2022/06/03/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>/2022/06/03/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="二分法的运用"><a href="#二分法的运用" class="headerlink" title="二分法的运用"></a>二分法的运用</h1><h4 id="二分法使用基本条件："><a href="#二分法使用基本条件：" class="headerlink" title="二分法使用基本条件："></a>二分法使用基本条件：</h4><p><strong>有序整数</strong>数组</p><p>通过<strong>循环</strong>，不断更新<strong>左边界</strong>（<em>LeftBorder</em>)与<strong>右边界</strong>(<em>RightBorder</em>)达到你需要的目的</p><ul><li><h4 id="二分法用于查询有序数组的某一个元素，若有，则返回序号，无，则返回-1"><a href="#二分法用于查询有序数组的某一个元素，若有，则返回序号，无，则返回-1" class="headerlink" title="二分法用于查询有序数组的某一个元素，若有，则返回序号，无，则返回-1"></a>二分法用于查询有序数组的某一个元素，若有，则返回序号，无，则返回-1</h4><p>​ 相关题目：给定一个 n 个元素的升序整型数组 nums 和一个目标值 target,写一个函数搜索 nums 中的 target,如果目标值存在则返回下标，否则返回-1</p><p>示例 1：</p><p>输入：nums &#x3D; [-1,0,3,5,9,12], target&#x3D;9</p><p>输出：4</p><p>解释：9 出现在 nums 中因此返回-1</p><p>示例 2：</p><p>输入：nums&#x3D;[-1,0,3,5,9,12], target&#x3D;2</p><p>输出：-1</p><p>解释：2 在 nums 中不存在，因此返回-1</p><ul><li><p>提示：</p><p>[^1.]: 你可以假设 nums 中的所有元素是不重复出现的。<br>[^2.]: n 将在[1,10000]之间<br>[^3.]: nums 中的每个元素都将在[-9999,9999]之间</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心代码模式</span></span><br><span class="line"><span class="comment">// Java版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// 左边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;<span class="comment">// 右边界</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;<span class="comment">// 采用左闭右闭[]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right -left)/<span class="number">2</span>;<span class="comment">// 求中位数的序号</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;<span class="comment">// 说明此时target在数组的左侧</span></span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[middle] == target) &#123;<span class="comment">// 如果相等，说明找到了target</span></span><br><span class="line">                    <span class="keyword">return</span> middle;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">// 说明此时target在数组的右侧</span></span><br><span class="line">                    left = middle + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span> -<span class="number">1</span><span class="comment">// 跳出while循环还没找到，说明没有！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><em>kotlin</em>版本</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">search</span><span class="params">(nums: <span class="type">IntArray</span>, target: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> right = nums.size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">var</span> middle = left + (right - left)/<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[middle] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> middle</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = middle + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2022/06/02/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/06/02/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-命令及-shell-编程浅谈"><a href="#Linux-命令及-shell-编程浅谈" class="headerlink" title="Linux 命令及 shell 编程浅谈"></a>Linux 命令及 shell 编程浅谈</h1><ul><li><h3 id="Linux文件系统结构"><a href="#Linux文件系统结构" class="headerlink" title="Linux文件系统结构"></a><em>Linux</em>文件系统结构</h3></li></ul><p><img src="/postImage/image-20220515190158467.png" alt="image-20220515190158467"></p><ul><li><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li>*匹配<strong>任何字符</strong>或<strong>任何数目</strong>的字符</li><li>？匹配任何单字符</li><li>[…] 匹配任何包含在括号里的单字符</li><li>目录表示：. 指示当前目录，.. 表示当前目录的父目录</li></ul></li><li><h3 id="启动退出命令"><a href="#启动退出命令" class="headerlink" title="启动退出命令"></a>启动退出命令</h3><ul><li><em>logout</em> 注销</li><li><em>exit</em> 退出</li><li><em>reboot</em> 重启系统（需要管理员权限）</li><li><em>shutdown</em> 关机 （需要管理员权限 ）</li></ul></li><li><h3 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h3><ul><li><em>pwd</em> 显示出用户当前工作目录的全部路径(<em>print working directory</em>)</li><li><em>mkdir directory_name</em> 创建新目录(<em>make directory</em>)</li><li><em>cd directory_name</em> 改变当前工作目录</li><li><em>rmdir directory_name</em> 删除目录，但要求目录中<strong>不存在文件或子目录</strong></li></ul></li><li><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><em>ls [-a&#x2F;-R&#x2F;-l&#x2F;-lc&#x2F;-lu] [dir_name]</em> 显示目录命令</li></ul></li><li><p><em>cat filename</em> 显示出文件内容</p><ul><li><em>view filename</em> 只能读出文件内容</li></ul></li><li><p><em>head [-i] filename</em> 显示文件的<strong>开始 i 行</strong></p><ul><li><em>tail [-i] filename</em> 显示文件的<strong>末 i 行</strong></li></ul></li><li><p><em>pr filename</em> 显示格式化的文本内容(<em>print</em>)</p><ul><li><em>cp source_file target_file</em> 复制文件（新的文件可以同名）</li></ul></li><li><p><em>rm -i&#x2F;r&#x2F;f file_or_dir</em> 删除文件 (i 互动删除，删除前再确认一次，r 递归删除，强制删除)</p><ul><li><em>chmod pattern filename</em> 修改文件权限</li></ul></li><li><p><em>find pathname [option] expression</em> 寻找文件名</p><ul><li><em>diff filename1 filename2</em> 比较来两个文件的不同</li></ul></li><li><p><em>touch filename</em> 改变文件日期，不对文件内容改动，若文件不存在则创建新文件</p><ul><li><em>date</em> 显示或设置日期（只有 root 用户才有权设置日期）</li></ul></li><li><p><em>cal</em> [month] year 显示某年指定的日历</p><ul><li><em>time</em> [command] 计算程序或命令在其执行所消耗的时间</li></ul></li><li><p><em>history</em> 帮助用户回忆执行过的命令</p><ul><li><em>man [command_name]</em> 显示参考手册，提供联机帮助信息</li></ul></li><li><p><em>echo [-n] [arguments]</em> 将参数即字符串至标准输出即显示器</p></li><li><p>简单实例一</p><ol><li><p>设定变量 file 的值为*&#x2F;etc&#x2F;passwd*</p></li><li><p>使用循环变量读取文件*&#x2F;etc&#x2F;passwd*的第 2，4，6，10，13，15 行，并显示其内容</p></li><li><p>把这些行保存至&#x2F;tmp&#x2F;mypasswd 文件中</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">file=&quot;/etc/passwd&quot;       # 务必使用“”</span><br><span class="line">for i in 2 4 6 10 13 15</span><br><span class="line">do</span><br><span class="line">        head -$i $file   # 务必使用 $</span><br><span class="line">        head -$i $file&gt;&quot;/tmp/mypasswd&quot;</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>简单实例二</p><ol><li><p>传递两个整数给脚本，让脚本分别计算并显示这两个整数的和，差，积，商。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!bin/bash</span></span><br><span class="line">a=$1      # 执行脚本是应为 sh filename argument1 argument2</span><br><span class="line">b=$2</span><br><span class="line">var1=`expr $a + $b`   # 务必注意运算符与参数之间的空格</span><br><span class="line">var2=`expr $a - $b`</span><br><span class="line">var3=`expr $a \* $b`  # 注意 \*</span><br><span class="line">var4=`expr $a / $b`</span><br><span class="line">echo &quot;a+b=$var1&quot;</span><br><span class="line">echo &quot;a-b=$var2&quot;</span><br><span class="line">echo &quot;a*b=$var3&quot;</span><br><span class="line">echo &quot;a/b=$var4&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>简单实例三</p><ol><li><p>显示系统日期和时间，而后创建目录&#x2F;tmp&#x2F;lstest</p></li><li><p>切换工作目录至&#x2F;tmp&#x2F;lstest</p></li><li><p>创建目录 a1d,b56e,6test</p></li><li><p>创建空文件 xy,x2y,732</p></li><li><p>列出当前目录下以 a，x 或者 6 开头的文件或目录</p></li><li><p>列出当前目录下以字母开头，后跟一个任意数字，而后跟任意长度字符的文件或目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">date</span><br><span class="line">mkdir /tmp/lstest</span><br><span class="line">cd /tmp/lstest</span><br><span class="line">mkdir a1d b56e 6test  # 注意空格</span><br><span class="line">touch xy x2y 732      # 注意空格</span><br><span class="line">ls [ax6]*             # 注意正则表达式的运用</span><br><span class="line">ls [[:alpha:]][[:digit:]]*   # 注意[]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>简单实例四</p><ol><li><p>编写一个名为<em>myfirstshell.sh</em>的脚本</p></li><li><p>包含一段注释，列出您的姓名、脚本的名称和编写这个脚本的目的</p></li><li><p>问候用户</p></li><li><p>显示日期和时间</p></li><li><p>显示这个月的日历</p></li><li><p>显示您的机器名</p></li><li><p>显示当前这个操作系统的名称和版本</p></li><li><p>显示父目录中的所有文件的列表</p></li><li><p>显示<em>root</em>正在运行的所有进程</p></li><li><p>显示变量<em>TERM、PATH</em>和<em>HOME</em>的值</p></li><li><p>显示磁盘使用情况</p></li><li><p>用 id 命令打印出您的组 ID</p></li><li><p>跟用户说<em>“Good bye”</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">author:@Ezralin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">name:myfirstshell</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pourpose: to improve myself</span></span><br><span class="line">user=`whoami`</span><br><span class="line">case $user in</span><br><span class="line">    root)</span><br><span class="line">        echo &quot;hello root&quot;;;</span><br><span class="line">    Ezralin)</span><br><span class="line">        echo &quot;hello Bin&quot;;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;hello $user,welcome&quot;</span><br><span class="line">esac</span><br><span class="line">echo &quot;日期和时间：`date`&quot;</span><br><span class="line">echo &quot;本月的日历：`cal`&quot;</span><br><span class="line">echo &quot;本机的机器猫：`uname -n`&quot;</span><br><span class="line">echo &quot;当前这个操作系统的名称和版本：`uname -s;uname -r`&quot;</span><br><span class="line">echo &quot;父目录中的所有文件的列表：`ls ../`&quot;</span><br><span class="line">echo &quot;root正在运行的所有程序：`ps -u root`&quot;</span><br><span class="line">echo &quot;变量TERM的值：$TERM&quot;</span><br><span class="line">echo &quot;变量PATH的值：$PATH&quot;</span><br><span class="line">echo &quot;变量HOME的值：$HOME&quot;</span><br><span class="line">echo &quot;磁盘的使用情况：`df`&quot;</span><br><span class="line">echo &quot;用id命令打印出你的组ID：`id -g`&quot;</span><br><span class="line">echo &quot;Good bye!&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java与kotlin对比学习</title>
      <link href="/2022/06/02/java%E4%B8%8Ekotlin%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/06/02/java%E4%B8%8Ekotlin%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java与kotlin对比学习一"><a href="#Java与kotlin对比学习一" class="headerlink" title="Java与kotlin对比学习一"></a><em>Java</em>与<em>kotlin</em>对比学习一</h1><ul><li><h3 id="构造函数、声明属性对比"><a href="#构造函数、声明属性对比" class="headerlink" title="构造函数、声明属性对比"></a>构造函数、声明属性对比</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Java</em>的构造函数非常直接，类型修饰符+类名+()，若有属性，则再（）中加入参数，与 C++语言有异曲同工之妙，而<em>Kotlin</em>胜在**精简 **</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span> </span>(aName: String, aAge: <span class="built_in">Int</span>) &#123;  <span class="comment">// 临时定义变量保存外部传过来的值</span></span><br><span class="line">    <span class="keyword">var</span> name: String = aName   <span class="comment">// aName, aAge是临时的，真正定义并完成初始化操作</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或在初始化块中调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span> </span>(aName: String, aAge: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        name = aName</span><br><span class="line">        age = aAge</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>kotlin</em>还可以直接在<em>constructor</em>内部<strong>直接</strong>声明属性，与<em>Java</em>相比<strong>更加精简</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span> </span>(<span class="keyword">private</span> <span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>) &#123; <span class="comment">// 在主构造函数中直接声明属性</span></span><br><span class="line">    <span class="keyword">var</span> score = <span class="number">99</span>  <span class="comment">// 需要在创建对象时给予初始值的属性才放到主构造函数中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="定义函数对比"><a href="#定义函数对比" class="headerlink" title="定义函数对比"></a>定义函数对比</h3><ul><li><p>无参无返回值的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;  <span class="comment">// java</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun test(): Unit &#123;&#125;   // Kotlin</span><br></pre></td></tr></table></figure></li><li><p>有参无返回值的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;&#125;   <span class="comment">// java</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span>&#123;&#125;   <span class="comment">// kotlin</span></span><br></pre></td></tr></table></figure></li><li><p>有参有返回值的函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;                  <span class="comment">// java</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b    <span class="comment">// kotlin</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果函数只有一行，也可写为下述形式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = a + b</span><br><span class="line"><span class="comment">// 甚至返回值类型也可省略</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码运行深层原理</title>
      <link href="/2022/06/02/Java%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%B7%B1%E5%B1%82%E5%8E%9F%E7%90%86/"/>
      <url>/2022/06/02/Java%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E6%B7%B1%E5%B1%82%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-浅谈"><a href="#JVM-浅谈" class="headerlink" title="JVM 浅谈"></a>JVM 浅谈</h1><ul><li><h3 id="Java-构造对象浅谈"><a href="#Java-构造对象浅谈" class="headerlink" title="Java 构造对象浅谈"></a>Java 构造对象浅谈</h3><p>​ 在日常编程中，我们不假思索地使用<em>new</em>去新建一个对象，但 <em>Java</em>是如何在底层进行对象的创建？如何在底层完成对象的创建并进行初始化？下面我们来探讨以下这个问题：</p><p><code><em>Animal animal=new Animal()</em></code></p><p>上行代码是对象实例化的过程，在程序中执行这行代码，将会经历以下过程：</p><ol><li><p>在<strong>方法区</strong>寻找 Animal 类的信息</p></li><li><p><strong>判断</strong> <em>Java</em>编译后的字节码里面是否有这个<em>Animal</em>类，如果没有，则类加载器会将当前这个类的<strong>字节码文件</strong>加载到文件中</p></li><li><p><code>new Animal()</code>创建对象时，对象在<strong>堆</strong>（_heap_）里面被分配内存空间</p></li><li><p>该被创建的对象在<strong>堆</strong>中的<strong>地址</strong>会被压入<strong>操作数栈</strong></p></li><li><p>在当前<strong>线程栈</strong>的方法栈帧的<strong>局部变量区域</strong>申请内存空间给<em>animal</em></p></li><li><p>从操作数帧中弹出顶部操作数（就是被创建对象在<strong>堆</strong>中的<strong>地址</strong>）赋值给<em>animal</em>，从而使<em>animal</em> <strong>指向</strong>新建的<em>Animal</em>对象</p></li></ol><hr></li><li><h3 id="JVM-理解"><a href="#JVM-理解" class="headerlink" title="JVM 理解"></a>JVM 理解</h3><p>我们将从下面这个简单的代码的<strong>反编译</strong>的*.class<em>文件，深度理解</em>Java*是如何在内存中被执行的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> a= <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (a+b)*<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TestPerson testPerson=<span class="keyword">new</span> <span class="title class_">TestPerson</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> testPerson.doSomething();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上述代码的class反编译文件"><a href="#上述代码的class反编译文件" class="headerlink" title=".上述代码的class反编译文件"></a>.上述代码的<em>class</em>反编译文件</h4><p>我们对一些可以<strong>见名知意</strong>的名词不做过多解释，不清楚的大家可以在简书中搜索，<strong>此处</strong>主要还是<strong>加深</strong>大家对代码的<strong>理解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;JVM_03.TestPerson.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JVM_03</span>.TestPerson &#123;</span><br><span class="line">  <span class="keyword">public</span> JVM_03.TestPerson();               <span class="comment">// 这是默认构造函数</span></span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: iconst_1      <span class="comment">// 把常量1压入操作数栈</span></span><br><span class="line">       <span class="number">1</span>: istore_1      <span class="comment">// 从操作数栈中弹出刚刚入栈的常量1</span></span><br><span class="line">                        <span class="comment">// 并把它赋值给局部变量表中索引为1的变量</span></span><br><span class="line">                        <span class="comment">// 即赋值给a  (对应代码：int a=1)</span></span><br><span class="line">       <span class="number">2</span>: iconst_2</span><br><span class="line">       <span class="number">3</span>: istore_2            <span class="comment">// 同上</span></span><br><span class="line">       <span class="number">4</span>: iload_1             <span class="comment">// 将局部变量表中下标为1的int变量压入操作数栈</span></span><br><span class="line">       <span class="number">5</span>: iload_2             <span class="comment">// 同上</span></span><br><span class="line">       <span class="number">6</span>: iadd                <span class="comment">// 在操作数栈中完成两数相加</span></span><br><span class="line">       <span class="number">7</span>: iconst_5            <span class="comment">// 将常量5压入操作数栈</span></span><br><span class="line">       <span class="number">8</span>: imul                <span class="comment">//在操作数栈中完成乘法运算</span></span><br><span class="line">       <span class="number">9</span>: istore_3            <span class="comment">//弹出运算结果并且赋值给局部变量表中索引为3的变量</span></span><br><span class="line">      <span class="number">10</span>: iload_3</span><br><span class="line">      <span class="number">11</span>: ireturn             <span class="comment">// 返回int类型的值 (ireturn 语句中 i就表示int)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class JVM_03.TestPerson</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: aload_1</span><br><span class="line">       <span class="number">9</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method doSomething:()I</span></span><br><span class="line">      <span class="number">12</span>: istore_2</span><br><span class="line">      <span class="number">13</span>: getstatic     #<span class="number">5</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">16</span>: iload_2</span><br><span class="line">      <span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">      <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​ 下面我们再挖深一些，进一步揭开 JVM 的面纱：</p><p>​ 我们先了解一下<em>Java</em>的<strong>运行时数据区</strong>(<em>Runtime Date Area</em>)，<em>Java</em>程序被运行时，内存中运行时数据区会被分为五部分，见下图。</p><p>​ <em>Java</em>程序运行是按线程来操作的，在线程栈中运行多个线程。每一个<strong>线程</strong>都有一个自己的<strong>栈帧</strong>，而每一个栈帧又包含局部变量、操作数栈、动态链接、方法出口四部分。上述就是在 main 线程里面的栈帧进行的。这里还要讲解一下，<strong>函数出口记录</strong>的问题。</p><p>​ 就上述<em>Java</em>代码而言，显然，程序需要从 main 函数进入<em>doSomething</em>函数，再返回 main 函数，为了不迷路，<em>Java</em>采用”<strong>标记</strong>“的方法记录出口，上述的*.class<em>文件中的#2 等等就是”标记“。当<code>new</code>一个新的对象时上述代码调用了默认构造函数，此时就需要进入该构造函数，</em>Java<em>离开 main 函数留下”标记“，java 进入函数时又留下”标记“，如此，进入不同函数，它就知道运行时如何返回</em>main*函数了。</p><ul><li><h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><img src="/postImage/img-1.jpg" /></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型与Kotlin高阶语法糖</title>
      <link href="/2022/06/02/Java%E6%B3%9B%E5%9E%8B%E4%B8%8EKotlin%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
      <url>/2022/06/02/Java%E6%B3%9B%E5%9E%8B%E4%B8%8EKotlin%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型与Kotlin高阶函数语法糖"><a href="#Java泛型与Kotlin高阶函数语法糖" class="headerlink" title="Java泛型与Kotlin高阶函数语法糖"></a><em>Java</em>泛型与<em>Kotlin</em>高阶函数语法糖</h1><ul><li><h3 id="java泛型"><a href="#java泛型" class="headerlink" title="java泛型"></a><em>java</em>泛型</h3><ol><li><p>什么是泛型？ 泛指<strong>一切类型</strong></p><p> 常使用 <em>T</em> <em>R</em> <em>V</em> <em>K</em> <em>I</em> <em>O</em> 表示</p></li><li><p>协变与形变</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Object&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        List&lt;String&gt; b = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        a = b; <span class="comment">// 报错,为什么,a 需要 List&lt;Objects&gt;类型，而b 为List&lt;String&gt;类型</span></span><br><span class="line">        *****************</span><br><span class="line">        <span class="comment">// 此时需要使用协变</span></span><br><span class="line">        父类接收子类 协变 ? <span class="keyword">extends</span></span><br><span class="line">        <span class="title class_">List</span>&lt;? <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">// ? 为占位符，表示一个继承于Object的子类</span></span><br><span class="line">        List&lt;String&gt; d = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        c = d;<span class="comment">// 正确!!!</span></span><br><span class="line">        *****************</span><br><span class="line">        List&lt;Object&gt; e = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        List&lt;String&gt; f = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        f = e;<span class="comment">// 报错，f需要List&lt;Object&gt;类型，而e为List&lt;String&gt;类型，类型不匹配</span></span><br><span class="line">        *****************</span><br><span class="line">        <span class="comment">// 此时需要使用形变</span></span><br><span class="line">        子类接收父类 形变 ? <span class="built_in">super</span></span><br><span class="line">        List&lt;Object&gt; g = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        List&lt;? <span class="built_in">super</span> String&gt; h = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        h = g;<span class="comment">// 正确！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>java</em>泛型类的使用</p><p> 注意：泛型类中的方法只是使用了泛型类类型作为参数的函数，不是泛型函数</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="comment">// T type</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bag</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T getValue &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// main</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 前面&lt;&gt; 和 后面&lt;&gt; 必须指定一处类型</span></span><br><span class="line">        Bag&lt;String&gt; schoolBag = <span class="keyword">new</span> <span class="title class_">Bag</span>&lt;&gt;();</span><br><span class="line">        schoolBag.setValue(<span class="string">&quot;语文书&quot;</span>);</span><br><span class="line">        System.out.println(schoolBag.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="kotlin泛型类的使用"><a href="#kotlin泛型类的使用" class="headerlink" title="kotlin泛型类的使用"></a><em>kotlin</em>泛型类的使用</h3><ol><li><p><em>kotlin</em>泛型类的使用</p><p> <em>kotlin</em>: <em>out</em> 这个类型只能作为返回值 输出 生产</p><p> <em>kotln</em>: <em>in</em>只能作为参数 接受 消费</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span>&lt;<span class="type">in I,out O</span>&gt;</span>(<span class="keyword">var</span> value: <span class="meta">@UnsafeVariance</span> I,<span class="keyword">var</span> result: <span class="meta">@UnsafeVariance</span> O) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(v1: <span class="type">I</span>)</span></span> &#123;</span><br><span class="line">        value = v1</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">()</span></span>: O &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="Kotlin泛型函数的使用"><a href="#Kotlin泛型函数的使用" class="headerlink" title="Kotlin泛型函数的使用"></a><em>Kotlin</em>泛型函数的使用</h3><p>何为泛型函数？不确定参数或者返回值类型的函数就是泛型函数</p><ol><li><p>仅有一个泛型</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">test</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">test1</span><span class="params">()</span></span>: T &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">test2</span><span class="params">(v1: <span class="type">T</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>放回值和参数类型均需要自己指定</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T,R&gt;</span> <span class="title">test</span><span class="params">(v1: <span class="type">T</span>, v2: <span class="type">T</span>)</span></span>: R? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h3 id="Kotlin高阶函数分析"><a href="#Kotlin高阶函数分析" class="headerlink" title="Kotlin高阶函数分析"></a><em>Kotlin</em>高阶函数分析</h3><ol><li><p>何为<strong>高阶函数</strong>与为什么需要使用**<em>inline</em>**?</p><p> 高阶函数是将<strong>函数</strong>用作<strong>参数或返回值</strong>的函数，实际开发过程中<strong>一般所有</strong>高阶函数都必须使用**<em>inline</em><strong>修饰，使之成为</strong>内联函数<strong>。不使用<em>inline</em>修饰高阶函数时，使用此类<a href="https://www.kotlincn.net/docs/reference/lambdas.html">高阶函数</a>会带来一些运行时的效率损失，因为编译时，每一个函数都是一个</strong>对象<strong>，</strong>内存分配<strong>（对于函数对象和类）和</strong>虚拟调用<strong>会引入</strong>运行时间开销<strong>，</strong>降低效率<strong>。当<em>inline</em>修饰了高阶函数时，此时编译时程序只是做了一个</strong>展开&#x2F;替换*<em>（类似于 C 语言的宏定义），所以在许多情况下我们通过使用</em>inline*内联化 lambda 表达式来消除这类的开销。</p></li><li><p>**<em>lambda</em>**表达式分析</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">show1</span><span class="params">(lambda: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// lamba表达式为String类型的形参，没有返回值</span></span><br><span class="line">    <span class="comment">// lambda 表达式里面是 it</span></span><br><span class="line">    lambda(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">show2</span><span class="params">(lambda: <span class="type">String</span>.() -&gt; <span class="type">Unit</span> )</span></span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式里面是 this</span></span><br><span class="line">    <span class="keyword">this</span>.lambda()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="string">&quot;jack&quot;</span>.show1&#123;</span><br><span class="line">        println(<span class="string">&quot;hello <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;Merry&quot;</span>.show2&#123;</span><br><span class="line">        println(<span class="string">&quot;hello <span class="variable">$this</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>lambda</em>与泛型的综合运用</p><ul><li>给任意一个类型添加一个扩展函数，lambda 中使用 it 访问这个对象</li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">show1</span><span class="params">(lambda: (<span class="type">T</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    lambda(<span class="keyword">this</span>) <span class="comment">// 在这个函数中this指代的是调用这个扩展函数类型为T的对象,并把它作为参数传递给lambda，</span></span><br><span class="line">    <span class="comment">//在lambda中使用it访问这个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给任意一个类型添加一个扩展函数，lambda 中使用 this 访问这个对象</li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">show2</span><span class="params">(lambda: <span class="type">T</span>.() -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.lambda() <span class="comment">// this指代是调用这个扩展函数类型为T的对象，再将其作为调用lambda的对象</span></span><br><span class="line">     <span class="comment">// 在lambda中使用this访问这个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>给任意一个类型添加一个扩展函数,并将这个对象传递给 lambda 表达式,lambda 返回值的类型由 lambda 最后一行的结果决定</li></ul> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T,R&gt;</span> T.<span class="title">show3</span><span class="params">(lambda: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> result = lambda(<span class="keyword">this</span>)</span><br><span class="line">println(result!!::<span class="keyword">class</span>.java.name)</span><br><span class="line"><span class="comment">// 上行可以打印出lambda表达式最后一行结果的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>运行效果如下</li></ul></li></ul><p>​ <img src="/postImage/image-20220529173006301.png" alt="image-20220529173006301"><img src="/postImage/image-20220529173058283.png" alt="image-20220529173058283"></p><ul><li><h3 id="Kotlin语法糖分析"><a href="#Kotlin语法糖分析" class="headerlink" title="Kotlin语法糖分析"></a><em>Kotlin</em>语法糖分析</h3><ul><li><p><em>apply</em>分析</p><p><em>apply</em>作用：使用 apply 可以进行初始化操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">myApply</span><span class="params">(lambda: <span class="type">T</span>.() -&gt; <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">this</span>.lambda()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>also 分析</p><p><em>also</em>作用：使用 also 可以完成同时性的操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">myAlso</span><span class="params">(lambda: (<span class="type">T</span>) -&gt; <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    lambda(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>run 分析</p><p><em>run</em>作用：使用 run 可以执行一段代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">myRun</span><span class="params">(lambda: () -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line"><span class="keyword">return</span> lambda()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T,R&gt;</span> T.<span class="title">myRun</span><span class="params">(lambda: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.lambda()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>with 分析</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T,R&gt;</span> <span class="title">myWith</span><span class="params">(value: <span class="type">T</span>,lambda: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    <span class="keyword">return</span> value.lambda()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>forEach 分析</p><p><em>forEach</em>作用：使用 forEach 可以遍历完成相关的操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">myForEach</span><span class="params">(lambda: (<span class="type">T</span>) -&gt; <span class="type">Unit</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">lambda(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
